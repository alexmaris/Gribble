using System;
using System.Collections.Generic;
using System.Linq;
using Gribble;
using Gribble.Expressions;
using Gribble.Model;
using Gribble.TransactSql;
using NUnit.Framework;
using Should;

namespace Tests.TransactSql
{
    [TestFixture]
    public class SchemaTests
    {
        public class Entity
        {
            public Guid Id { get; set; }
            public string Name { get; set; }
            public DateTime Birthdate { get; set; }
            public DateTime? Created { get; set; }
            public int Age { get; set; }
            public float Price { get; set; }
            public double Distance { get; set; }
            public byte Flag { get; set; }
            public bool Active { get; set; }
            public decimal Length { get; set; }
            public long Miles { get; set; }
            public Dictionary<string, object> Values { get; set; }
        }

        public const string TableName = "some_table_in_the_db";
        private const string TableName1 = "XLIST_1";
        private const string TableName2 = "XLIST_2";
        private const string TableName3 = "XLIST_3";
        private const string TableName4 = "XLIST_4";

        [Test]
        public void Create_Table_Test()
        {
            var statement = SchemaWriter.CreateTableCreateStatement(TableName,
                new Column("Id", typeof(Guid), isPrimaryKey: true, isAutoGenerated: true),
                new Column("Name", typeof(string), 500, true),
                new Column("Active", typeof(bool), isNullable: false, defaultValue: true),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("CREATE TABLE [some_table_in_the_db] ([Id] uniqueidentifier NOT NULL DEFAULT NEWSEQUENTIALID(), [Name] nvarchar (500) NULL, [Active] bit NOT NULL DEFAULT 1, [Created] datetime NOT NULL DEFAULT GETDATE(), CONSTRAINT [PK_some_table_in_the_db_Id] PRIMARY KEY ([Id] ASC))");
        }

        [Test]
        public void Create_Table_Identity_Test()
        {
            var statement = SchemaWriter.CreateTableCreateStatement(TableName, 
                new Column("Id", typeof(int), isIdentity: true, isPrimaryKey: true),
                new Column("Uid", typeof(Guid), isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("CREATE TABLE [some_table_in_the_db] ([Id] int IDENTITY(1,1) NOT NULL, [Uid] uniqueidentifier NOT NULL DEFAULT NEWID(), [Name] nvarchar (500) NULL, [Created] datetime NOT NULL DEFAULT GETDATE(), CONSTRAINT [PK_some_table_in_the_db_Id] PRIMARY KEY ([Id] ASC))");
        }

        [Test]
        public void Create_Table_Clustered_Primary_Key_Test()
        {
            var statement = SchemaWriter.CreateTableCreateStatement(TableName,
                new Column("Id", typeof(int), isIdentity: true, isClusteredPrimaryKey: true),
                new Column("Uid", typeof(Guid), isAutoGenerated: true),
                new Column("Name", typeof(string), isNullable: true, length: 500),
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("CREATE TABLE [some_table_in_the_db] ([Id] int IDENTITY(1,1) NOT NULL, [Uid] uniqueidentifier NOT NULL DEFAULT NEWID(), [Name] nvarchar (500) NULL, [Created] datetime NOT NULL DEFAULT GETDATE(), CONSTRAINT [PK_some_table_in_the_db_Id] PRIMARY KEY CLUSTERED ([Id] ASC))");
        }

        [Test]
        public void Table_Exists_Test()
        {
            var statement = SchemaWriter.CreateTableExistsStatement(TableName);
            statement.Result.ShouldEqual(Statement.ResultType.Scalar);
            statement.Text.ShouldEqual("SELECT CAST(CASE WHEN EXISTS (SELECT * FROM [sys].[tables] WHERE [name] = 'some_table_in_the_db') THEN 1 ELSE 0 END AS bit)");
        }

        [Test]
        public void Drop_Table_Test()
        {
            var statement = SchemaWriter.CreateDeleteTableStatement(TableName);
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("IF EXISTS (SELECT * FROM [sys].[tables] WHERE [name] = 'some_table_in_the_db') DROP TABLE [some_table_in_the_db]");
        }

        [Test]
        public void Create_Table_Columns_Test()
        {
            var select = new Select { Target = { Type = Data.DataType.Table, 
                                                 Table = new Table { Name = TableName }},
                                      Source = { Type = Data.DataType.Query, 
                                                 Queries = new List<Select> { new Select { Source = { Type = Data.DataType.Table, 
                                                                                                      Table = new Table { Name = TableName1 }}} }}};
            var statement = SchemaWriter.CreateCreateTableColumnsStatement(select);
            statement.Result.ShouldEqual(Statement.ResultType.Multiple);
            statement.Text.ShouldEqual("SELECT [SC].[name], [SC].[system_type_id], [max_length], [is_nullable], [is_identity], CAST((CASE OBJECT_DEFINITION([default_object_id]) WHEN " +
                                    "'(GETDATE())' THEN 1 WHEN '(NEWID())' THEN 1 WHEN '(NEWSEQUENTIALID())' THEN 1 ELSE 0 END) AS bit) AS [is_auto_generated], CASE " +
                                    "OBJECT_DEFINITION([default_object_id]) WHEN '(GETDATE())' THEN NULL WHEN '(NEWID())' THEN NULL WHEN '(NEWSEQUENTIALID())' THEN NULL ELSE " +
                                    "REPLACE(REPLACE(OBJECT_DEFINITION([default_object_id]), '(', ''), ')', '') END AS [default_value], ISNULL((SELECT TOP (1) [is_primary_key] FROM " +
                                    "([sys].[columns] JOIN [sys].[index_columns] ON [sys].[columns].[object_id] = [sys].[index_columns].[object_id] AND [sys].[columns].[column_id] = " +
                                    "[sys].[index_columns].[column_id]) JOIN [sys].[indexes] ON [sys].[indexes].[index_id] = [sys].[index_columns].[index_id] AND [sys].[indexes].[object_id] = " +
                                    "[sys].[index_columns].[object_id] WHERE [sys].[columns].[object_id] = [SC].[object_id] AND [sys].[columns].[column_id] = [SC].[column_id] AND [is_primary_key] = 1), 0) " +
                                    "AS [is_primary_key] FROM (SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], " +
                                    "CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = " +
                                    "OBJECT_ID(N'XLIST_1')) [__SubQuery__] JOIN [sys].[columns] [SC] ON [__SubQuery__].[name] = [SC].[name] AND [object_id] = OBJECT_ID(N'XLIST_1')");
        }

        [Test]
        public void Columns_Test()
        {
            var query = MockQueryable<Entity>.Create(TableName1);
            query.Union(MockQueryable<Entity>.Create(TableName2).Take(5).Union(MockQueryable<Entity>.Create(TableName3).Skip(4).OrderBy(x => x.Active)));
            var statement = SchemaWriter.CreateUnionColumnsStatement(SelectVisitor<Entity>.CreateModel(query.Expression, x => ((MockQueryable<Entity>)x).Name));

            statement.Parameters.Count().ShouldEqual(0);
            statement.Text.ShouldEqual("SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_3') INTERSECT " +
                                    "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_2') INTERSECT " +
                                    "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_1')");
        }

        [Test]
        public void Insert_Into_Columns_Test()
        {
            var query = MockQueryable<Entity>.Create(TableName1);
            query.Union(MockQueryable<Entity>.Create(TableName2).Take(5).Union(MockQueryable<Entity>.Create(TableName3).Skip(4).OrderBy(x => x.Active))).CopyTo(MockQueryable<Entity>.Create(TableName4));
            var statement = SchemaWriter.CreateSelectIntoColumnsStatement(SelectVisitor<Entity>.CreateModel(query.Expression, x => ((MockQueryable<Entity>)x).Name));

            statement.Parameters.Count().ShouldEqual(0);
            statement.Text.ShouldEqual("SELECT [__SubQuery__].[name], CAST(CASE WHEN [sys].[columns].[system_type_id] < (SELECT MAX([system_type_id]) FROM [sys].[columns] WHERE [name] = [__SubQuery__].[name] AND [system_type_id] IN (175, 167, 35, 239, 231, 99) AND [object_id] IN (OBJECT_ID(N'XLIST_3'), OBJECT_ID(N'XLIST_2'), OBJECT_ID(N'XLIST_1'))) THEN 1 ELSE 0 END AS bit) AS [NarrowingConversion] FROM (" +
                "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_3') INTERSECT " +
                "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_2') INTERSECT " +
                "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_1') INTERSECT " +
                "SELECT [name], CASE [system_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [system_type_id] END AS [system_type_id], CASE [user_type_id] WHEN 167 THEN 231 WHEN 175 THEN 239 WHEN 35 THEN 99 ELSE [user_type_id] END AS [user_type_id] FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'XLIST_4')" +
                ") [__SubQuery__] JOIN [sys].[columns] ON [__SubQuery__].[name] = [sys].[columns].[name] AND [object_id] = OBJECT_ID(N'XLIST_4')");
        }

        [Test]
        public void Add_Column_Test()
        {
            var statement = SchemaWriter.CreateAddColumnStatement(TableName, 
                new Column("Created", typeof(DateTime), isNullable: false, isAutoGenerated: true));
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("ALTER TABLE [some_table_in_the_db] ADD [Created] datetime NOT NULL DEFAULT GETDATE()");
        }

        [Test]
        public void Drop_Column_Test()
        {
            var statement = SchemaWriter.CreateRemoveColumnStatement(TableName, "Created");
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("IF EXISTS (SELECT * FROM [sys].[columns] WHERE [object_id] = OBJECT_ID(N'some_table_in_the_db') AND [name] = 'Created') ALTER TABLE [some_table_in_the_db] DROP COLUMN [Created]");
        }

        [Test]
        public void Create_Non_Clustered_Index_Test()
        {
            var statement = SchemaWriter.CreateAddNonClusteredIndexStatement(TableName, "Created", "Id");
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("CREATE NONCLUSTERED INDEX [IX_some_table_in_the_db_Created_Id] ON [some_table_in_the_db] ([Created] ASC, [Id] ASC)");
        }

        [Test]
        public void Drop_Index_Test()
        {
            var statement = SchemaWriter.CreateRemoveNonClusteredIndexStatement(TableName, "Created_Index");
            statement.Result.ShouldEqual(Statement.ResultType.None);
            statement.Text.ShouldEqual("IF EXISTS (SELECT * FROM [sys].[indexes] WHERE [object_id] = OBJECT_ID(N'some_table_in_the_db') AND [name] = 'Created_Index') DROP INDEX [Created_Index] ON [some_table_in_the_db]");
        }
    }
}
